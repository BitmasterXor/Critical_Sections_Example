unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, System.SyncObjs;

type
  TForm1 = class(TForm)
    Button1: TButton;
    Label1: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private
    CriticalSection: TCriticalSection;
    procedure UpdateUILabel(ThreadID: Integer);
  public
    procedure ExecuteThread(ThreadID: Integer);
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.FormCreate(Sender: TObject);
begin
  CriticalSection := TCriticalSection.Create;
end;

procedure TForm1.Button1Click(Sender: TObject);
var
  Thread1, Thread2: TThread;
begin
  Thread1 := TThread.CreateAnonymousThread(
    procedure
    begin
      ExecuteThread(1);
    end);
  Thread2 := TThread.CreateAnonymousThread(
    procedure
    begin
      ExecuteThread(2);
    end);

  Thread1.Start;
  Thread2.Start;
end;

procedure TForm1.UpdateUILabel(ThreadID: Integer);
begin
  Label1.Caption := 'Thread ' + IntToStr(ThreadID) + ' is in control';
end;

procedure TForm1.ExecuteThread(ThreadID: Integer);
var
  i: Integer;
begin
  for i := 1 to 100 do
  begin
    CriticalSection.Enter;
    try
      // Update UI to show which thread is in control
      TThread.Synchronize(nil,
        procedure
        begin
          UpdateUILabel(ThreadID);
        end);
    finally
      CriticalSection.Leave;
    end;

    // Simulate work by sleeping for a short time
    Sleep(500);
  end;
end;

end.

